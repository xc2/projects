# npm_repos = []

#def use_npm_package_bin(name, version, integrity, entry_point, package = None, run_name = "bin", proxy = None, **kwargs):
#    npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
#
#    package = package or name
#    npm.npm_import(
#        name = name,
#        #        extract_full_archive = True,
#        extra_build_content = "\n".join([
#            """load("@aspect_rules_js//js:defs.bzl", "js_binary")""",
#            "",
#            """js_binary(""",
#            """  name = "{}",""".format(run_name),
#            """  data = [":package"],""",
#            """  entry_point = ":package/{}",""".format(entry_point),
#            """  copy_data_to_bin = False,""",
#            """  visibility = ["//visibility:public"],""",
#            """  chdir = "$$BUILD_WORKING_DIRECTORY",""",
#            """)""",
#            "",
#        ]),
#        # npm info <pkg>@<version> dist.integrity
#        integrity = integrity,
#        package = package,
#        version = version,
#        **kwargs
#    )
#    npm_repos.append(name)

# def use_node_modules(name, package = None, npmrc = None, pnpm_lock = None, **kwargs):
#     npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)

#     package = package or "//"
#     pnpm_lock = pnpm_lock or "{}:pnpm-lock.yaml".format(package)
#     npmrc = npmrc or "//:.npmrc"
#     npm.npm_translate_lock(
#         name = name,
#         npmrc = npmrc,
#         verify_node_modules_ignored = "//:.bazelignore",
#         pnpm_lock = pnpm_lock,
#         **kwargs
#     )

#     npm_repos.append(name)

# https://bazel.build/rules/lib/globals/module
# https://registry.bazel.build
bazel_dep(name = "aspect_bazel_lib", version = "2.8.1")
bazel_dep(name = "aspect_rules_js", version = "2.0.1")
bazel_dep(name = "aspect_rules_swc", version = "2.0.0")
bazel_dep(name = "aspect_rules_ts", version = "3.1.0")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "aspect_rules_esbuild", version = "0.21.0")

####### Node.js version #########
# By default you get the node version from DEFAULT_NODE_VERSION in @rules_nodejs//nodejs:repositories.bzl
# Optionally you can pin a different node version:
bazel_dep(name = "rules_nodejs", version = "6.3.0")

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(node_version = "20.11.1")
use_repo(node, "nodejs")

#################################
#use_npm_package_bin(
#    name = "pnpm",
#    entry_point = "bin/pnpm.cjs",
#    integrity = "sha512-c6Ka+jag0JLs5Scd5Rd+y/gxjUVOzXATQxMbjrwMGpHEh9pGq3fI5ZbWrPFGHjWUztS+zt+JIbB0+9hlPtcFHA==",
#    run_name = "pnpm",
#    version = "9.10.0",
#)


pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")
pnpm.pnpm(
    name = "pnpm",
    pnpm_version = "9.10.0",
    pnpm_version_integrity = "sha512-c6Ka+jag0JLs5Scd5Rd+y/gxjUVOzXATQxMbjrwMGpHEh9pGq3fI5ZbWrPFGHjWUztS+zt+JIbB0+9hlPtcFHA==",
)
use_repo(pnpm, "pnpm")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "npm",
    pnpm_lock = "//:pnpm-lock.yaml",
    npmrc = "//:.npmrc",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

npm.npm_translate_lock(
    name = "game-start-npm",
    pnpm_lock = "//game-start:pnpm-lock.yaml",
    npmrc = "//:.npmrc",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "game-start-npm")

npm.npm_translate_lock(
    name = "ros-scripts-npm",
    pnpm_lock = "//ros-scripts:pnpm-lock.yaml",
    npmrc = "//:.npmrc",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "ros-scripts-npm")

npm.npm_translate_lock(
    name = "watermark-npm",
    pnpm_lock = "//watermark:pnpm-lock.yaml",
    npmrc = "//:.npmrc",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "watermark-npm")

npm.npm_translate_lock(
    name = "wrangler",
    pnpm_lock = "//tools/wrangler:pnpm-lock.yaml",
    npmrc = "//:.npmrc",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "wrangler")

npm.npm_translate_lock(
    name = "lint",
    pnpm_lock = "//tools/lint:pnpm-lock.yaml",
    npmrc = "//:.npmrc",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "lint")

npm.npm_translate_lock(
    name = "shadcn",
    pnpm_lock = "//tools/shadcn:pnpm-lock.yaml",
    npmrc = "//:.npmrc",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "shadcn")

npm.npm_translate_lock(
    name = "pwa",
    pnpm_lock = "//tools/pwa:pnpm-lock.yaml",
    npmrc = "//:.npmrc",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "pwa")

npm.npm_translate_lock(
    name = "drizzle",
    pnpm_lock = "//tools/drizzle:pnpm-lock.yaml",
    npmrc = "//:.npmrc",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "drizzle")

npm.npm_translate_lock(
    name = "jsts",
    pnpm_lock = "//tools/jsts:pnpm-lock.yaml",
    npmrc = "//:.npmrc",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "jsts")

npm.npm_translate_lock(
    name = "prisma",
    pnpm_lock = "//tools/prisma:pnpm-lock.yaml",
    npmrc = "//:.npmrc",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "prisma")

npm.npm_translate_lock(
    name = "supabase",
    pnpm_lock = "//tools/supabase:pnpm-lock.yaml",
    npmrc = "//:.npmrc",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "supabase")

################################################################################
# rules_ts
################################################################################

rules_ts_ext = use_extension("@aspect_rules_ts//ts:extensions.bzl", "ext", dev_dependency = True)
rules_ts_ext.deps()
use_repo(rules_ts_ext, "npm_typescript")
